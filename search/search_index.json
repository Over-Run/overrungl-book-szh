{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u9605\u8bfb OverrunGL Book \u7b80\u4f53\u4e2d\u6587\u7248 \u00b6 \u672c\u4e66\u6559\u4f60\u4f7f\u7528 OverrunGL \u7f16\u5199 3D \u6e38\u620f\u3002 OverrunGL \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u672c\u673a\u7ed1\u5b9a\u5e93\u3002\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u4f60\u5c06\u5229\u7528 OverrunGL \u6765\u7f16\u5199\u4e00\u4e2a\u57fa\u672c\u7684\u6e38\u620f\u5f15\u64ce\u3002 \u5982\u679c\u4f60\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u52a1\u5fc5\u5230\u6211\u4eec\u7684 \u8bba\u575b \u67e5\u627e\u6216\u63d0\u51fa\u95ee\u9898\u3002 \u70b9\u51fb \u201c Next \u201d \u6309\u94ae\uff0c\u5f00\u59cb\u6211\u4eec\u7684 OverrunGL \u4e4b\u65c5\uff01 \u5efa\u8bae\u9605\u8bfb \u00b6 LearnOpenGL CN Lwjglbook \u4e2d\u6587\u7ffb\u8bd1","title":"\u4ecb\u7ecd"},{"location":"#overrungl-book","text":"\u672c\u4e66\u6559\u4f60\u4f7f\u7528 OverrunGL \u7f16\u5199 3D \u6e38\u620f\u3002 OverrunGL \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u672c\u673a\u7ed1\u5b9a\u5e93\u3002\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u4f60\u5c06\u5229\u7528 OverrunGL \u6765\u7f16\u5199\u4e00\u4e2a\u57fa\u672c\u7684\u6e38\u620f\u5f15\u64ce\u3002 \u5982\u679c\u4f60\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u52a1\u5fc5\u5230\u6211\u4eec\u7684 \u8bba\u575b \u67e5\u627e\u6216\u63d0\u51fa\u95ee\u9898\u3002 \u70b9\u51fb \u201c Next \u201d \u6309\u94ae\uff0c\u5f00\u59cb\u6211\u4eec\u7684 OverrunGL \u4e4b\u65c5\uff01","title":"\u6b22\u8fce\u9605\u8bfb OverrunGL Book \u7b80\u4f53\u4e2d\u6587\u7248"},{"location":"#_1","text":"LearnOpenGL CN Lwjglbook \u4e2d\u6587\u7ffb\u8bd1","title":"\u5efa\u8bae\u9605\u8bfb"},{"location":"1-preparing/","text":"\u51c6\u5907\u5de5\u4f5c \u00b6 \u5728\u5f00\u59cb\u7f16\u5199\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u9879\u76ee\u3002\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Java 19 \u3002 \u5728\u9879\u76ee\u7684\u6784\u5efa\u811a\u672c\u4e2d\u6dfb\u52a0\u4f9d\u8d56\u5e93\u3002\u672a\u6765\uff0c\u6211\u4eec\u53ef\u4f7f\u7528 Customizer \u751f\u6210\u4f9d\u8d56\u5e93\u3002 \u540c\u65f6\uff0c\u7531\u4e8e FFM API \u4ecd\u5904\u4e8e\u9884\u89c8\u4e2d\uff0c\u9700\u8981\u5728\u6784\u5efa\u811a\u672c\u4e2d\u5f00\u542f\u9884\u89c8\u529f\u80fd\u3002 // Groovy project.ext.overrunglVer = \"0.1.0\" project.ext.overrunglNatives = \"natives-windows\" dependencies { implementation platform(\"io.github.over-run:overrungl-bom:$overrunglVer\") implementation \"io.github.over-run:overrungl\" implementation \"io.github.over-run:overrungl-glfw\" implementation \"io.github.over-run:overrungl-opengl\" implementation \"io.github.over-run:overrungl-stb\" runtimeOnly \"io.github.over-run:overrungl-glfw::$overrungNatives\" runtimeOnly \"io.github.over-run:overrungl-stb::$overrungNatives\" } tasks.withType(JavaCompile).configureEach { options.compilerArgs += \"--enable-preview\" } // Kotlin DSL Script val overrunglVer = \"0.1.0\" val overrungNatives = \"natives-windows\" dependencies { implementation(platform(\"io.github.over-run:overrungl-bom:$overrunglVer\")) implementation(\"io.github.over-run:overrungl\") implementation(\"io.github.over-run:overrungl-glfw\") implementation(\"io.github.over-run:overrungl-opengl\") implementation(\"io.github.over-run:overrungl-stb\") runtimeOnly(\"io.github.over-run\", \"overrungl-glfw\", classifier = overrungNatives) runtimeOnly(\"io.github.over-run\", \"overrungl-stb\", classifier = overrungNatives) } tasks.withType < JavaCompile > { options.compilerArgs.add(\"--enable-preview\") } \u5982\u679c\u4f60\u4ee5\u524d\u4f7f\u7528\u8fc7 LWJGL \uff0c\u4f60\u4f1a\u6ce8\u610f\u5230\u4e00\u4e9b\u6a21\u5757\u6ca1\u6709\u4f7f\u7528\u672c\u673a\u5e93\uff08 Natives Library \uff09\u3002\u8fd9\u662f\u56e0\u4e3a\u8fd9\u4e9b\u6a21\u5757\u4f7f\u7528\u4e86\u7cfb\u7edf\u672c\u673a\u5e93\u6216\u4f7f\u7528\u5176\u4ed6\u6a21\u5757\u8fdb\u884c\u52a0\u8f7d\uff08\u4f8b\u5982 OpenGL \u6a21\u5757\u4f7f\u7528 GLFW \u6a21\u5757\u52a0\u8f7d\u51fd\u6570\uff09\uff0c\u4e8e\u662f\u6211\u4eec\u4e0d\u7528\u4e3a\u8fd9\u4e9b\u6a21\u5757\u6784\u5efa\u672c\u673a\u5e93\u3002 \u9879\u76ee\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u4f7f\u7528 \u6b64\u793a\u4f8b \u6765\u521b\u5efa\u4f60\u7684\u7a97\u53e3\u3002\u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u4f60\u4f1a\u770b\u5230\u4ee5\u4e0b\u7ea2\u8272\u7a97\u53e3\uff0c\u5982\u56fe 1 \u6240\u793a\u3002 \u56fe 1","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"1-preparing/#_1","text":"\u5728\u5f00\u59cb\u7f16\u5199\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u9879\u76ee\u3002\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Java 19 \u3002 \u5728\u9879\u76ee\u7684\u6784\u5efa\u811a\u672c\u4e2d\u6dfb\u52a0\u4f9d\u8d56\u5e93\u3002\u672a\u6765\uff0c\u6211\u4eec\u53ef\u4f7f\u7528 Customizer \u751f\u6210\u4f9d\u8d56\u5e93\u3002 \u540c\u65f6\uff0c\u7531\u4e8e FFM API \u4ecd\u5904\u4e8e\u9884\u89c8\u4e2d\uff0c\u9700\u8981\u5728\u6784\u5efa\u811a\u672c\u4e2d\u5f00\u542f\u9884\u89c8\u529f\u80fd\u3002 // Groovy project.ext.overrunglVer = \"0.1.0\" project.ext.overrunglNatives = \"natives-windows\" dependencies { implementation platform(\"io.github.over-run:overrungl-bom:$overrunglVer\") implementation \"io.github.over-run:overrungl\" implementation \"io.github.over-run:overrungl-glfw\" implementation \"io.github.over-run:overrungl-opengl\" implementation \"io.github.over-run:overrungl-stb\" runtimeOnly \"io.github.over-run:overrungl-glfw::$overrungNatives\" runtimeOnly \"io.github.over-run:overrungl-stb::$overrungNatives\" } tasks.withType(JavaCompile).configureEach { options.compilerArgs += \"--enable-preview\" } // Kotlin DSL Script val overrunglVer = \"0.1.0\" val overrungNatives = \"natives-windows\" dependencies { implementation(platform(\"io.github.over-run:overrungl-bom:$overrunglVer\")) implementation(\"io.github.over-run:overrungl\") implementation(\"io.github.over-run:overrungl-glfw\") implementation(\"io.github.over-run:overrungl-opengl\") implementation(\"io.github.over-run:overrungl-stb\") runtimeOnly(\"io.github.over-run\", \"overrungl-glfw\", classifier = overrungNatives) runtimeOnly(\"io.github.over-run\", \"overrungl-stb\", classifier = overrungNatives) } tasks.withType < JavaCompile > { options.compilerArgs.add(\"--enable-preview\") } \u5982\u679c\u4f60\u4ee5\u524d\u4f7f\u7528\u8fc7 LWJGL \uff0c\u4f60\u4f1a\u6ce8\u610f\u5230\u4e00\u4e9b\u6a21\u5757\u6ca1\u6709\u4f7f\u7528\u672c\u673a\u5e93\uff08 Natives Library \uff09\u3002\u8fd9\u662f\u56e0\u4e3a\u8fd9\u4e9b\u6a21\u5757\u4f7f\u7528\u4e86\u7cfb\u7edf\u672c\u673a\u5e93\u6216\u4f7f\u7528\u5176\u4ed6\u6a21\u5757\u8fdb\u884c\u52a0\u8f7d\uff08\u4f8b\u5982 OpenGL \u6a21\u5757\u4f7f\u7528 GLFW \u6a21\u5757\u52a0\u8f7d\u51fd\u6570\uff09\uff0c\u4e8e\u662f\u6211\u4eec\u4e0d\u7528\u4e3a\u8fd9\u4e9b\u6a21\u5757\u6784\u5efa\u672c\u673a\u5e93\u3002 \u9879\u76ee\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u4f7f\u7528 \u6b64\u793a\u4f8b \u6765\u521b\u5efa\u4f60\u7684\u7a97\u53e3\u3002\u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u4f60\u4f1a\u770b\u5230\u4ee5\u4e0b\u7ea2\u8272\u7a97\u53e3\uff0c\u5982\u56fe 1 \u6240\u793a\u3002 \u56fe 1","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"2-game-loop/","text":"\u6e38\u620f\u5faa\u73af \u00b6 \u7406\u8bba \u00b6 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4e3a\u6e38\u620f\u5f15\u64ce\u521b\u5efa\u4e00\u4e2a\u6e38\u620f\u5faa\u73af\u3002\u5229\u7528\u6e38\u620f\u5faa\u73af\uff0c\u6211\u4eec\u53ef\u5728\u6bcf\u4e00\u5e27\u66f4\u65b0\u72b6\u6001\uff0c\u6e32\u67d3\u7b49\u3002 \u8fd9\u6bb5\u4f2a\u4ee3\u7801\u663e\u793a\u4e86\u6e38\u620f\u5faa\u73af\u57fa\u672c\u903b\u8f91\u3002 while (running) { update(); render(); post_processing(); } \u7136\u800c\uff0c\u8fd9\u4e2a\u5faa\u73af\u53ea\u80fd\u5904\u7406\u56fa\u5b9a\u66f4\u65b0\u4e0e\u6e32\u67d3\u3002\u5982\u679c\u7cfb\u7edf\u8fd0\u884c\u901f\u5ea6\u8fc7\u5feb\u6216\u8fc7\u6162\uff0c\u4f60\u5c06\u65e0\u6cd5\u89c2\u5bdf\u5230\u8fd0\u884c\u60c5\u51b5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 Timer \u6765\u8ba1\u7b97\u4e24\u6b21\u8fd0\u884c\u65f6\u95f4\u7684\u95f4\u9694\uff08\u4e5f\u79f0 delta \uff09\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u7b80\u6613 Timer \u3002\u5b83\u80fd\u8ba1\u7b97 delta \u5e76\u7528\u4e8e\u66f4\u65b0\u65f6\u7684\u56e0\u6570\u3002\u867d\u7136\u5b83\u4e0d\u80fd\u4f7f\u6bcf\u79d2\u66f4\u65b0\u6b21\u6570\u76f8\u540c\uff0c\u4f46\u662f\u5bf9\u73b0\u5728\u6765\u8bf4\u591f\u7528\u4e86\u3002 double lastTime, currentTime, delta; while (running) { lastTime = currentTime; currentTime = getCurrentTime(); delta = currentTime - lastTime; update(delta); render(); post_processing(); } \u5b9e\u8df5 \u00b6 \u4e86\u89e3\u6e38\u620f\u5faa\u73af\u8fd0\u884c\u539f\u7406\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u6b63\u5f0f\u5f00\u59cb\u7f16\u5199\u4e86\u3002 \u4e3a\u4e86\u8fd0\u884c\u6e38\u620f\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u63a5\u53e3\u3002\u8fd9\u4e2a\u63a5\u53e3\u5305\u542b\u57fa\u672c\u903b\u8f91\uff0c\u4ee5\u4fbf\u6211\u4eec\u4eca\u540e\u590d\u7528\u3002 package io.github.overrunglbook.game; public interface IGameLogic extends AutoCloseable { void init(); void onKey(int key, int scancode, int action, int mods); void onResize(int oldWidth, int oldHeight, int newWidth, int newHeight); void update(); void render(); } \u6211\u4eec\u8fd8\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u7a97\u53e3\u7c7b\u5c01\u88c5\u3002 package io.github.overrunglbook.render; import org.overrun.glib.glfw.Callbacks; import org.overrun.glib.glfw.GLFW; import org.overrun.glib.util.ValueInt2; import java.lang.foreign.MemoryAddress; public final class Window { private final MemoryAddress window; private int fbWidth, fbHeight; public Window(IGameLogic logic, int width, int height, String title) { window = GLFW.createWindow(width, height, title, MemoryAddress.NULL, MemoryAddress.NULL); if (window == MemoryAddress.NULL) { throw new IllegalStateException(\"Failed to create the GLFW window\"); } var size = GLFW.getFramebufferSize(window); fbWidth = size.x(); fbHeight = size.y(); GLFW.setKeyCallback(window, (handle, key, scancode, action, mods) -> logic.onKey(key, scancode, action, mods)); GLFW.setFramebufferSizeCallback(window, (handle, w, h) -> { logic.onResize(fbWidth, fbHeight, w, h); fbWidth = w; fbHeight = h; }); } public ValueInt2 getSize() { return GLFW.getWindowSize(window); } public void setPos(int x, int y) { GLFW.setWindowPos(window, x, y); } public void makeContextCurrent() { GLFW.makeContextCurrent(window); } public void show() { GLFW.showWindow(window); } public void setShouldClose(boolean value) { GLFW.setWindowShouldClose(window, value); } public void swapBuffers() { GLFW.swapBuffers(window); } public void destroy() { Callbacks.free(window); GLFW.destroyWindow(window); } /** * returns the window * * @return the window */ public MemoryAddress window() { return window; } /** * returns width of the framebuffer * * @return width of the framebuffer */ public int fbWidth() { return fbWidth; } /** * returns height of the framebuffer * * @return height of the framebuffer */ public int fbHeight() { return fbHeight; } } \u6700\u540e\uff0c\u53ea\u9700\u8981\u63d0\u4f9b\u6e38\u620f\u5b9e\u73b0\u5e76\u5c06\u4e4b\u524d\u7684\u4ee3\u7801\u642c\u8fc7\u6765\u5c31\u884c\u4e86\u3002 package io.github.overrunglbook.game; import org.overrun.glib.gl.GL; import org.overrun.glib.gl.GLConstC; import org.overrun.glib.glfw.GLFW; import static org.overrun.glib.gl.GLConstC.*; public class DummyGame implements IGameLogic { private final Window window; public void start() { GLFWErrorCallback.createPrint().set(); if (!GLFW.init()) { throw new IllegalStateException(\"Unable to initialize GLFW\"); } GLFW.defaultWindowHints(); GLFW.windowHint(GLFW.VISIBLE, false); GLFW.windowHint(GLFW.RESIZABLE, true); window = new Window(this, 800, 600, \"Hello world\"); var vidMode = GLFW.getVideoMode(GLFW.getPrimaryMonitor()); if (vidMode != null) { var size = window.getSize(); window.setPos( (vidMode.width() - size.x()) / 2, (vidMode.height() - size.y()) / 2 ); } window.makeContextCurrent(); GLFW.swapInterval(1); window.show(); } @Override public void init() { if (GLCaps.load(GLFW::getProcAddress) == 0) throw new IllegalStateException(\"Failed to load OpenGL\"); GL.clearColor(0.4f, 0.6f, 0.9f, 1.0f); } @Override public void onKey(int key, int scancode, int action, int mods) { if (key == GLFW.KEY_ESCAPE && action == GLFW.RELEASE) { window.setShouldClose(true); } } @Override public void onResize(int oldWidth, int oldHeight, int newWidth, int newHeight) { GL.viewport(0, 0, newWidth, newHeight); } @Override public void update() { } @Override public void render() { GL.clear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); window.swapBuffers(); window.pollEvents(); } @Override public void close() { window.destroy(); GLFW.terminate(); GLFW.setErrorCallback(null); } } package io.github.overrunglbook; public final class Main { public static void main(String[] args) { try (var game = new DummyGame()) { game.start(); } } }","title":"\u6e38\u620f\u5faa\u73af"},{"location":"2-game-loop/#_1","text":"","title":"\u6e38\u620f\u5faa\u73af"},{"location":"2-game-loop/#_2","text":"\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4e3a\u6e38\u620f\u5f15\u64ce\u521b\u5efa\u4e00\u4e2a\u6e38\u620f\u5faa\u73af\u3002\u5229\u7528\u6e38\u620f\u5faa\u73af\uff0c\u6211\u4eec\u53ef\u5728\u6bcf\u4e00\u5e27\u66f4\u65b0\u72b6\u6001\uff0c\u6e32\u67d3\u7b49\u3002 \u8fd9\u6bb5\u4f2a\u4ee3\u7801\u663e\u793a\u4e86\u6e38\u620f\u5faa\u73af\u57fa\u672c\u903b\u8f91\u3002 while (running) { update(); render(); post_processing(); } \u7136\u800c\uff0c\u8fd9\u4e2a\u5faa\u73af\u53ea\u80fd\u5904\u7406\u56fa\u5b9a\u66f4\u65b0\u4e0e\u6e32\u67d3\u3002\u5982\u679c\u7cfb\u7edf\u8fd0\u884c\u901f\u5ea6\u8fc7\u5feb\u6216\u8fc7\u6162\uff0c\u4f60\u5c06\u65e0\u6cd5\u89c2\u5bdf\u5230\u8fd0\u884c\u60c5\u51b5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 Timer \u6765\u8ba1\u7b97\u4e24\u6b21\u8fd0\u884c\u65f6\u95f4\u7684\u95f4\u9694\uff08\u4e5f\u79f0 delta \uff09\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u7b80\u6613 Timer \u3002\u5b83\u80fd\u8ba1\u7b97 delta \u5e76\u7528\u4e8e\u66f4\u65b0\u65f6\u7684\u56e0\u6570\u3002\u867d\u7136\u5b83\u4e0d\u80fd\u4f7f\u6bcf\u79d2\u66f4\u65b0\u6b21\u6570\u76f8\u540c\uff0c\u4f46\u662f\u5bf9\u73b0\u5728\u6765\u8bf4\u591f\u7528\u4e86\u3002 double lastTime, currentTime, delta; while (running) { lastTime = currentTime; currentTime = getCurrentTime(); delta = currentTime - lastTime; update(delta); render(); post_processing(); }","title":"\u7406\u8bba"},{"location":"2-game-loop/#_3","text":"\u4e86\u89e3\u6e38\u620f\u5faa\u73af\u8fd0\u884c\u539f\u7406\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u6b63\u5f0f\u5f00\u59cb\u7f16\u5199\u4e86\u3002 \u4e3a\u4e86\u8fd0\u884c\u6e38\u620f\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u63a5\u53e3\u3002\u8fd9\u4e2a\u63a5\u53e3\u5305\u542b\u57fa\u672c\u903b\u8f91\uff0c\u4ee5\u4fbf\u6211\u4eec\u4eca\u540e\u590d\u7528\u3002 package io.github.overrunglbook.game; public interface IGameLogic extends AutoCloseable { void init(); void onKey(int key, int scancode, int action, int mods); void onResize(int oldWidth, int oldHeight, int newWidth, int newHeight); void update(); void render(); } \u6211\u4eec\u8fd8\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u7a97\u53e3\u7c7b\u5c01\u88c5\u3002 package io.github.overrunglbook.render; import org.overrun.glib.glfw.Callbacks; import org.overrun.glib.glfw.GLFW; import org.overrun.glib.util.ValueInt2; import java.lang.foreign.MemoryAddress; public final class Window { private final MemoryAddress window; private int fbWidth, fbHeight; public Window(IGameLogic logic, int width, int height, String title) { window = GLFW.createWindow(width, height, title, MemoryAddress.NULL, MemoryAddress.NULL); if (window == MemoryAddress.NULL) { throw new IllegalStateException(\"Failed to create the GLFW window\"); } var size = GLFW.getFramebufferSize(window); fbWidth = size.x(); fbHeight = size.y(); GLFW.setKeyCallback(window, (handle, key, scancode, action, mods) -> logic.onKey(key, scancode, action, mods)); GLFW.setFramebufferSizeCallback(window, (handle, w, h) -> { logic.onResize(fbWidth, fbHeight, w, h); fbWidth = w; fbHeight = h; }); } public ValueInt2 getSize() { return GLFW.getWindowSize(window); } public void setPos(int x, int y) { GLFW.setWindowPos(window, x, y); } public void makeContextCurrent() { GLFW.makeContextCurrent(window); } public void show() { GLFW.showWindow(window); } public void setShouldClose(boolean value) { GLFW.setWindowShouldClose(window, value); } public void swapBuffers() { GLFW.swapBuffers(window); } public void destroy() { Callbacks.free(window); GLFW.destroyWindow(window); } /** * returns the window * * @return the window */ public MemoryAddress window() { return window; } /** * returns width of the framebuffer * * @return width of the framebuffer */ public int fbWidth() { return fbWidth; } /** * returns height of the framebuffer * * @return height of the framebuffer */ public int fbHeight() { return fbHeight; } } \u6700\u540e\uff0c\u53ea\u9700\u8981\u63d0\u4f9b\u6e38\u620f\u5b9e\u73b0\u5e76\u5c06\u4e4b\u524d\u7684\u4ee3\u7801\u642c\u8fc7\u6765\u5c31\u884c\u4e86\u3002 package io.github.overrunglbook.game; import org.overrun.glib.gl.GL; import org.overrun.glib.gl.GLConstC; import org.overrun.glib.glfw.GLFW; import static org.overrun.glib.gl.GLConstC.*; public class DummyGame implements IGameLogic { private final Window window; public void start() { GLFWErrorCallback.createPrint().set(); if (!GLFW.init()) { throw new IllegalStateException(\"Unable to initialize GLFW\"); } GLFW.defaultWindowHints(); GLFW.windowHint(GLFW.VISIBLE, false); GLFW.windowHint(GLFW.RESIZABLE, true); window = new Window(this, 800, 600, \"Hello world\"); var vidMode = GLFW.getVideoMode(GLFW.getPrimaryMonitor()); if (vidMode != null) { var size = window.getSize(); window.setPos( (vidMode.width() - size.x()) / 2, (vidMode.height() - size.y()) / 2 ); } window.makeContextCurrent(); GLFW.swapInterval(1); window.show(); } @Override public void init() { if (GLCaps.load(GLFW::getProcAddress) == 0) throw new IllegalStateException(\"Failed to load OpenGL\"); GL.clearColor(0.4f, 0.6f, 0.9f, 1.0f); } @Override public void onKey(int key, int scancode, int action, int mods) { if (key == GLFW.KEY_ESCAPE && action == GLFW.RELEASE) { window.setShouldClose(true); } } @Override public void onResize(int oldWidth, int oldHeight, int newWidth, int newHeight) { GL.viewport(0, 0, newWidth, newHeight); } @Override public void update() { } @Override public void render() { GL.clear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); window.swapBuffers(); window.pollEvents(); } @Override public void close() { window.destroy(); GLFW.terminate(); GLFW.setErrorCallback(null); } } package io.github.overrunglbook; public final class Main { public static void main(String[] args) { try (var game = new DummyGame()) { game.start(); } } }","title":"\u5b9e\u8df5"},{"location":"3-rendering/","text":"\u6e32\u67d3 \u00b6 \u524d\u8a00 \u00b6 \u4e0a\u4e00\u4e2a\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u6210\u529f\u521b\u5efa\u5929\u84dd\u8272\u7a97\u53e3\u3002\u672c\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u6dfb\u52a0\u4e00\u4e2a\u9c9c\u8273\u7684\u4e09\u89d2\u5f62\u3002 \u7406\u8bba \u00b6 \u5982\u56fe 3.2-1 \u6240\u793a\uff0c OpenGL \u4f7f\u7528\u53f3\u624b\u5750\u6807\u7cfb\uff0c\u5176\u4e2dy\u8f74\u5411\u4e0a\uff0c\u6bcf\u4e2a \u56fe\u5143 \uff08 Primitive \uff09\u7684\u5404\u4e2a\u9876\u70b9\u6309\u7167\u9006\u65f6\u9488\u6392\u5e8f\uff08\u4e5f\u53ef\u81ea\u884c\u8bbe\u7f6e\uff09\u3002 \u56fe 3.2-1 \u7070\u8272\u77e9\u5f62\u4e3a\u65e0\u6295\u5f71\u77e9\u9635\uff08 Projection Matrix \uff09\u65f6\u7684\u9ed8\u8ba4\u9876\u70b9\u8303\u56f4\u3002 \u6e32\u67d3\u7ba1\u7ebf \u00b6 \u5982\u56fe 3.2-2 \u6240\u793a\uff0c OpenGL \u6e32\u67d3\u65f6\u7ecf\u8fc7\u9876\u70b9\u7740\u8272\u3001\u66f2\u9762\u7ec6\u5206\u3001\u51e0\u4f55\u7740\u8272\u3001\u5149\u6805\u5316\u3001\u7247\u6bb5\u7740\u8272\u7b49\u6b65\u9aa4\u3002\u6211\u4eec\u7740\u91cd\u5173\u6ce8\u9876\u70b9\u3001\u7247\u6bb5\u7740\u8272\u4ee5\u53ca\u5de6\u4e0a\u89d2\u7684\u9876\u70b9\u6570\u636e\u3002 \u56fe 3.2-2 \u7740\u8272\u5668 \u00b6 \u4efb\u4f55\u4e00\u4e2a OpenGL \u7a0b\u5e8f\u90fd\u79bb\u4e0d\u5f00 \u7740\u8272\u5668 \uff08 Shader \uff09\u3002\u7740\u8272\u5668\u662f\u6e32\u67d3\u7684\u57fa\u672c\u7a0b\u5e8f\u3002\u4e00\u4e2a\u7740\u8272\u5668\u7c7b\u4f3c\u4e8e C \u7a0b\u5e8f\uff0c\u7f16\u8bd1\u540e\u7531\u663e\u5361\u9a71\u52a8\u6267\u884c\u3002 #version 330 in vec3 in_position; void main() { gl_Position = vec4(in_position, 1.0); } \u8fd9\u662f\u4e00\u6bb5\u7740\u8272\u5668\u7684\u793a\u4f8b\u4ee3\u7801\u3002\u5b83\u548c\u666e\u901a\u7684 C \u4ee3\u7801\u76f8\u4f3c\uff0c\u90fd\u542b\u6709\u5b8f\u3001\u53d8\u91cf\u3001\u51fd\u6570\u7b49\uff0c\u53ea\u662f\u4e3b\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a void \u3002 \u9876\u70b9\u6570\u636e \u00b6 \u6709\u4e86\u7740\u8272\u5668\uff0c\u5f53\u7136\u8fd8\u8981\u6709\u9876\u70b9\u6570\u636e\u3002 \u9876\u70b9\u6570\u636e \uff08 Vertex Data \uff09\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6216\u591a\u4e2a\u56fe\u5143\u7684\u9876\u70b9\u4f4d\u7f6e\u3001\u989c\u8272\u7b49\uff0c\u5e76\u4f20\u9012\u5230\u7740\u8272\u5668\u8fdb\u884c\u8fdb\u4e00\u6b65\u5904\u7406\u3002 float[] vertexData = { -0.5f, 0.5f, 0.0f, -0.5f, -0.5f, 0.0f, 0.5f, -0.5f, 0.0f, 0.5f, 0.5f, 0.0f, }; \u4e0a\u9762\u7684\u6570\u7ec4\u5b9a\u4e49\u4e86\u4e00\u4e2a\u56db\u8fb9\u5f62\u3002\u7136\u800c\uff0c OpenGL \u4e0d\u80fd\u76f4\u63a5\u7ed8\u5236\u56db\u8fb9\u5f62\u3002\u6211\u4eec\u5fc5\u987b\u624b\u52a8\u5c06\u5176\u7ec6\u5206\u4e3a\u591a\u4e2a\u4e09\u89d2\u5f62\uff0c\u6216\u662f\u4f7f\u7528 \u5143\u7d20\u7f13\u51b2\u5bf9\u8c61 \uff08 Element Buffer Object \uff0c\u7b80\u79f0 EBO \uff09\u3002 EBO \u5b9a\u4e49\u4e86\u7ed8\u5236\u56fe\u5143\u65f6\u4f7f\u7528\u7684\u9876\u70b9\u3002\u7d22\u5f15\u4ece 0 \u5f00\u59cb\u3002 int[] indexData = { 0, 1, 2, 2, 3, 0, }; \u5982\u56fe 3.2-4 \u6240\u793a\uff0c\u8be5\u56db\u8fb9\u5f62\u4f1a\u5206\u4e3a\u4e24\u4e2a\u4e09\u89d2\u5f62\u8fdb\u884c\u7ed8\u5236\u3002 \u56fe 3.2-4 \u5b9e\u8df5 \u00b6 \u4e86\u89e3\u4ee5\u4e0a\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u5f00\u59cb\u7f16\u5199\u4e86\u3002","title":"\u6e32\u67d3"},{"location":"3-rendering/#_1","text":"","title":"\u6e32\u67d3"},{"location":"3-rendering/#_2","text":"\u4e0a\u4e00\u4e2a\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u6210\u529f\u521b\u5efa\u5929\u84dd\u8272\u7a97\u53e3\u3002\u672c\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u6dfb\u52a0\u4e00\u4e2a\u9c9c\u8273\u7684\u4e09\u89d2\u5f62\u3002","title":"\u524d\u8a00"},{"location":"3-rendering/#_3","text":"\u5982\u56fe 3.2-1 \u6240\u793a\uff0c OpenGL \u4f7f\u7528\u53f3\u624b\u5750\u6807\u7cfb\uff0c\u5176\u4e2dy\u8f74\u5411\u4e0a\uff0c\u6bcf\u4e2a \u56fe\u5143 \uff08 Primitive \uff09\u7684\u5404\u4e2a\u9876\u70b9\u6309\u7167\u9006\u65f6\u9488\u6392\u5e8f\uff08\u4e5f\u53ef\u81ea\u884c\u8bbe\u7f6e\uff09\u3002 \u56fe 3.2-1 \u7070\u8272\u77e9\u5f62\u4e3a\u65e0\u6295\u5f71\u77e9\u9635\uff08 Projection Matrix \uff09\u65f6\u7684\u9ed8\u8ba4\u9876\u70b9\u8303\u56f4\u3002","title":"\u7406\u8bba"},{"location":"3-rendering/#_4","text":"\u5982\u56fe 3.2-2 \u6240\u793a\uff0c OpenGL \u6e32\u67d3\u65f6\u7ecf\u8fc7\u9876\u70b9\u7740\u8272\u3001\u66f2\u9762\u7ec6\u5206\u3001\u51e0\u4f55\u7740\u8272\u3001\u5149\u6805\u5316\u3001\u7247\u6bb5\u7740\u8272\u7b49\u6b65\u9aa4\u3002\u6211\u4eec\u7740\u91cd\u5173\u6ce8\u9876\u70b9\u3001\u7247\u6bb5\u7740\u8272\u4ee5\u53ca\u5de6\u4e0a\u89d2\u7684\u9876\u70b9\u6570\u636e\u3002 \u56fe 3.2-2","title":"\u6e32\u67d3\u7ba1\u7ebf"},{"location":"3-rendering/#_5","text":"\u4efb\u4f55\u4e00\u4e2a OpenGL \u7a0b\u5e8f\u90fd\u79bb\u4e0d\u5f00 \u7740\u8272\u5668 \uff08 Shader \uff09\u3002\u7740\u8272\u5668\u662f\u6e32\u67d3\u7684\u57fa\u672c\u7a0b\u5e8f\u3002\u4e00\u4e2a\u7740\u8272\u5668\u7c7b\u4f3c\u4e8e C \u7a0b\u5e8f\uff0c\u7f16\u8bd1\u540e\u7531\u663e\u5361\u9a71\u52a8\u6267\u884c\u3002 #version 330 in vec3 in_position; void main() { gl_Position = vec4(in_position, 1.0); } \u8fd9\u662f\u4e00\u6bb5\u7740\u8272\u5668\u7684\u793a\u4f8b\u4ee3\u7801\u3002\u5b83\u548c\u666e\u901a\u7684 C \u4ee3\u7801\u76f8\u4f3c\uff0c\u90fd\u542b\u6709\u5b8f\u3001\u53d8\u91cf\u3001\u51fd\u6570\u7b49\uff0c\u53ea\u662f\u4e3b\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a void \u3002","title":"\u7740\u8272\u5668"},{"location":"3-rendering/#_6","text":"\u6709\u4e86\u7740\u8272\u5668\uff0c\u5f53\u7136\u8fd8\u8981\u6709\u9876\u70b9\u6570\u636e\u3002 \u9876\u70b9\u6570\u636e \uff08 Vertex Data \uff09\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6216\u591a\u4e2a\u56fe\u5143\u7684\u9876\u70b9\u4f4d\u7f6e\u3001\u989c\u8272\u7b49\uff0c\u5e76\u4f20\u9012\u5230\u7740\u8272\u5668\u8fdb\u884c\u8fdb\u4e00\u6b65\u5904\u7406\u3002 float[] vertexData = { -0.5f, 0.5f, 0.0f, -0.5f, -0.5f, 0.0f, 0.5f, -0.5f, 0.0f, 0.5f, 0.5f, 0.0f, }; \u4e0a\u9762\u7684\u6570\u7ec4\u5b9a\u4e49\u4e86\u4e00\u4e2a\u56db\u8fb9\u5f62\u3002\u7136\u800c\uff0c OpenGL \u4e0d\u80fd\u76f4\u63a5\u7ed8\u5236\u56db\u8fb9\u5f62\u3002\u6211\u4eec\u5fc5\u987b\u624b\u52a8\u5c06\u5176\u7ec6\u5206\u4e3a\u591a\u4e2a\u4e09\u89d2\u5f62\uff0c\u6216\u662f\u4f7f\u7528 \u5143\u7d20\u7f13\u51b2\u5bf9\u8c61 \uff08 Element Buffer Object \uff0c\u7b80\u79f0 EBO \uff09\u3002 EBO \u5b9a\u4e49\u4e86\u7ed8\u5236\u56fe\u5143\u65f6\u4f7f\u7528\u7684\u9876\u70b9\u3002\u7d22\u5f15\u4ece 0 \u5f00\u59cb\u3002 int[] indexData = { 0, 1, 2, 2, 3, 0, }; \u5982\u56fe 3.2-4 \u6240\u793a\uff0c\u8be5\u56db\u8fb9\u5f62\u4f1a\u5206\u4e3a\u4e24\u4e2a\u4e09\u89d2\u5f62\u8fdb\u884c\u7ed8\u5236\u3002 \u56fe 3.2-4","title":"\u9876\u70b9\u6570\u636e"},{"location":"3-rendering/#_7","text":"\u4e86\u89e3\u4ee5\u4e0a\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u5f00\u59cb\u7f16\u5199\u4e86\u3002","title":"\u5b9e\u8df5"},{"location":"a2-terms/","text":"\u9644\u5f55 - \u672f\u8bed\u8868 \u00b6 \u4e2d\u6587 \u82f1\u6587 \u672c\u673a\u5e93 Natives Library \u56fe\u5143 Primitive \u6295\u5f71\u77e9\u9635 Projection Matrix \u7740\u8272\u5668 Shader \u9876\u70b9\u6570\u636e Vertex Data","title":"\u9644\u5f55 - \u672f\u8bed\u8868"},{"location":"a2-terms/#-","text":"\u4e2d\u6587 \u82f1\u6587 \u672c\u673a\u5e93 Natives Library \u56fe\u5143 Primitive \u6295\u5f71\u77e9\u9635 Projection Matrix \u7740\u8272\u5668 Shader \u9876\u70b9\u6570\u636e Vertex Data","title":"\u9644\u5f55 - \u672f\u8bed\u8868"}]}